import 'package:flutter/material.dart';
import 'dart:async';

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Colors.white,
      ),
      home: const ChangePasswordScreen(),
    );
  }
}

class ChangePasswordScreen extends StatefulWidget {
  const ChangePasswordScreen({Key? key}) : super(key: key);

  @override
  State<ChangePasswordScreen> createState() => _ChangePasswordScreenState();
}

class _ChangePasswordScreenState extends State<ChangePasswordScreen> with SingleTickerProviderStateMixin {
  final TextEditingController _originalPasswordController = TextEditingController();
  final TextEditingController _newPasswordController = TextEditingController();
  final TextEditingController _reEnterPasswordController = TextEditingController();
  
  bool _isLoading = false;
  bool _isPasswordVisible = false;
  bool _isNewPasswordVisible = false;
  bool _isReEnterPasswordVisible = false;
  String? _originalPasswordError;
  String? _newPasswordError;
  String? _reEnterPasswordError;
  
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  
  // Password strength indicators
  bool _hasMinLength = false;
  bool _hasUppercase = false;
  bool _hasLowercase = false;
  bool _hasDigit = false;
  bool _hasSpecialChar = false;
  
  @override
  void initState() {
    super.initState();
    
    // Initialize animation controller
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );
    
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeIn,
      ),
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.1),
      end: Offset.zero,
    ).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeOut,
      ),
    );
    
    _animationController.forward();
    
    // Add listeners to password controllers
    _newPasswordController.addListener(_checkPasswordStrength);
    _reEnterPasswordController.addListener(_checkPasswordMatch);
  }
  
  @override
  void dispose() {
    _originalPasswordController.dispose();
    _newPasswordController.dispose();
    _reEnterPasswordController.dispose();
    _animationController.dispose();
    super.dispose();
  }
  
  // Check password strength
  void _checkPasswordStrength() {
    final password = _newPasswordController.text;
    
    setState(() {
      _hasMinLength = password.length >= 8;
      _hasUppercase = password.contains(RegExp(r'[A-Z]'));
      _hasLowercase = password.contains(RegExp(r'[a-z]'));
      _hasDigit = password.contains(RegExp(r'[0-9]'));
      _hasSpecialChar = password.contains(RegExp(r'[!@#$%^&*(),.?":{}|<>]'));
    });
  }
  
  // Check if passwords match
  void _checkPasswordMatch() {
    if (_newPasswordController.text.isNotEmpty &&
        _reEnterPasswordController.text.isNotEmpty &&
        _newPasswordController.text != _reEnterPasswordController.text) {
      setState(() {
        _reEnterPasswordError = 'Passwords do not match';
      });
    } else {
      setState(() {
        _reEnterPasswordError = null;
      });
    }
  }
  
  // Calculate password strength
  double _calculatePasswordStrength() {
    int strength = 0;
    if (_hasMinLength) strength++;
    if (_hasUppercase) strength++;
    if (_hasLowercase) strength++;
    if (_hasDigit) strength++;
    if (_hasSpecialChar) strength++;
    
    return strength / 5;
  }
  
  // Get color based on password strength
  Color _getStrengthColor(double strength) {
    if (strength < 0.3) return Colors.red;
    if (strength < 0.7) return Colors.orange;
    return Colors.green;
  }
  
  // Submit password change
  Future<void> _submitPasswordChange() async {
    // Validate inputs
    bool isValid = true;
    
    if (_originalPasswordController.text.isEmpty) {
      setState(() {
        _originalPasswordError = 'Please enter your current password';
      });
      isValid = false;
    } else {
      setState(() {
        _originalPasswordError = null;
      });
    }
    
    if (_newPasswordController.text.isEmpty) {
      setState(() {
        _newPasswordError = 'Please enter a new password';
      });
      isValid = false;
    } else if (_calculatePasswordStrength() < 0.6) {
      setState(() {
        _newPasswordError = 'Password is too weak';
      });
      isValid = false;
    } else {
      setState(() {
        _newPasswordError = null;
      });
    }
    
    if (_reEnterPasswordController.text.isEmpty) {
      setState(() {
        _reEnterPasswordError = 'Please confirm your new password';
      });
      isValid = false;
    } else if (_newPasswordController.text != _reEnterPasswordController.text) {
      setState(() {
        _reEnterPasswordError = 'Passwords do not match';
      });
      isValid = false;
    } else {
      setState(() {
        _reEnterPasswordError = null;
      });
    }
    
    if (!isValid) return;
    
    // Show loading indicator
    setState(() {
      _isLoading = true;
    });
    
    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 2));
      
      // Show success message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Password changed successfully'),
            backgroundColor: Colors.green,
          ),
        );
        
        // Clear form
        _originalPasswordController.clear();
        _newPasswordController.clear();
        _reEnterPasswordController.clear();
      }
    } catch (e) {
      // Show error message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  
  // Reset password via forgot password flow
  void _forgotPassword() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Reset Password'),
        content: const Text(
          'We will send a password reset link to your registered email address.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              
              // Show loading indicator
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Sending reset link...'),
                  duration: Duration(seconds: 1),
                ),
              );
              
              // Simulate API call
              Future.delayed(const Duration(seconds: 2), () {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Password reset link sent to your email'),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              });
            },
            child: const Text('Send Reset Link'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: Colors.black,
        child: SafeArea(
          child: Container(
            decoration: BoxDecoration(
              color: const Color(0xFF000000),
              borderRadius: BorderRadius.circular(16),
            ),
            margin: const EdgeInsets.all(8),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: Column(
                children: [
                  _buildAppBar(),
                  Expanded(
                    child: Stack(
                      children: [
                        // Solid light blue background
                        Container(
                          color: const Color(0xFFAFD5FA),
                        ),
                        // Blue wave decoration
                        Positioned(
                          bottom: 0,
                          left: 0,
                          right: 0,
                          child: Container(
                            height: MediaQuery.of(context).size.height * 0.3,
                            decoration: const BoxDecoration(
                              color: Color(0xFF003B73),
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(180),
                                topRight: Radius.circular(180),
                              ),
                            ),
                          ),
                        ),
                        // Content
                        FadeTransition(
                          opacity: _fadeAnimation,
                          child: SlideTransition(
                            position: _slideAnimation,
                            child: SingleChildScrollView(
                              physics: const BouncingScrollPhysics(),
                              child: Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const SizedBox(height: 8),
                                    _buildPasswordField(
                                      label: "Original password:",
                                      controller: _originalPasswordController,
                                      isVisible: _isPasswordVisible,
                                      toggleVisibility: () {
                                        setState(() {
                                          _isPasswordVisible = !_isPasswordVisible;
                                        });
                                      },
                                      errorText: _originalPasswordError,
                                    ),
                                    const SizedBox(height: 16),
                                    _buildPasswordField(
                                      label: "New password:",
                                      controller: _newPasswordController,
                                      isVisible: _isNewPasswordVisible,
                                      toggleVisibility: () {
                                        setState(() {
                                          _isNewPasswordVisible = !_isNewPasswordVisible;
                                        });
                                      },
                                      errorText: _newPasswordError,
                                    ),
                                    if (_newPasswordController.text.isNotEmpty)
                                      _buildPasswordStrengthIndicator(),
                                    const SizedBox(height: 16),
                                    _buildPasswordField(
                                      label: "Re-enter password:",
                                      controller: _reEnterPasswordController,
                                      isVisible: _isReEnterPasswordVisible,
                                      toggleVisibility: () {
                                        setState(() {
                                          _isReEnterPasswordVisible = !_isReEnterPasswordVisible;
                                        });
                                      },
                                      errorText: _reEnterPasswordError,
                                    ),
                                    Align(
                                      alignment: Alignment.centerLeft,
                                      child: TextButton(
                                        onPressed: _forgotPassword,
                                        child: const Text(
                                          "Forgot password",
                                          style: TextStyle(
                                            color: Colors.blue,
                                            decoration: TextDecoration.underline,
                                          ),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(height: 24),
                                    _buildSubmitButton(),
                                    const SizedBox(height: 40),
                                    _buildPasswordInfoCard(),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                        // Loading overlay
                        if (_isLoading)
                          Container(
                            color: Colors.black.withOpacity(0.3),
                            child: const Center(
                              child: CircularProgressIndicator(
                                color: Colors.white,
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildAppBar() {
    return Container(
      color: const Color(0xFFAFD5FA),
      padding: const EdgeInsets.symmetric(horizontal: 8),
      height: 56,
      child: Row(
        children: [
          IconButton(
            icon: const Icon(Icons.arrow_back_ios, color: Colors.black),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          const Text(
            "Change Password",
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          const Spacer(),
          IconButton(
            icon: const Icon(Icons.copy, color: Colors.black54),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Copy feature coming soon')),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.phone, color: Colors.black54),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Support line: 1-800-HELP')),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPasswordField({
    required String label,
    required TextEditingController controller,
    required bool isVisible,
    required VoidCallback toggleVisibility,
    String? errorText,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        TextField(
          controller: controller,
          obscureText: !isVisible,
          decoration: InputDecoration(
            filled: true,
            fillColor: Colors.grey[200],
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide.none,
            ),
            suffixIcon: IconButton(
              icon: Icon(
                isVisible ? Icons.visibility_off : Icons.visibility,
                color: Colors.grey,
              ),
              onPressed: toggleVisibility,
            ),
            errorText: errorText,
          ),
        ),
      ],
    );
  }
  
  Widget _buildPasswordStrengthIndicator() {
    final strength = _calculatePasswordStrength();
    final color = _getStrengthColor(strength);
    
    return Padding(
      padding: const EdgeInsets.only(top: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(4),
                  child: LinearProgressIndicator(
                    value: strength,
                    backgroundColor: Colors.grey[300],
                    color: color,
                    minHeight: 8,
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Text(
                strength < 0.3 ? 'Weak' : (strength < 0.7 ? 'Medium' : 'Strong'),
                style: TextStyle(
                  color: color,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            children: [
              _buildPasswordCriteria('8+ chars', _hasMinLength),
              _buildPasswordCriteria('Uppercase', _hasUppercase),
              _buildPasswordCriteria('Lowercase', _hasLowercase),
              _buildPasswordCriteria('Number', _hasDigit),
              _buildPasswordCriteria('Symbol', _hasSpecialChar),
            ],
          ),
        ],
      ),
    );
  }
  
  Widget _buildPasswordCriteria(String label, bool isMet) {
    return Chip(
      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
      visualDensity: VisualDensity.compact,
      backgroundColor: isMet ? Colors.green.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
      label: Text(
        label,
        style: TextStyle(
          fontSize: 12,
          color: isMet ? Colors.green : Colors.grey,
        ),
      ),
      avatar: Icon(
        isMet ? Icons.check_circle : Icons.circle_outlined,
        size: 16,
        color: isMet ? Colors.green : Colors.grey,
      ),
    );
  }
  
  Widget _buildSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 50,
      child: ElevatedButton(
        onPressed: _isLoading ? null : _submitPasswordChange,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF003B73),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        child: const Text(
          'Change Password',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Widget _buildPasswordInfoCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'To protect your information and prevent unauthorized access to your account, use a strong password and change it every 3 to 6 months.',
            style: TextStyle(fontSize: 14),
          ),
          const SizedBox(height: 16),
          const Text(
            'Some key points to create a strong password:',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          _buildBulletPoint(
            'Avoid using easily guessable patterns (eg: sequential numbers, repeated characters, or your date of birth).',
          ),
          const SizedBox(height: 8),
          _buildBulletPoint(
            'Do not reuse passwords that you\'ve used in the past.',
          ),
          const SizedBox(height: 8),
          _buildBulletPoint(
            'Use a combination of uppercase letters, lowercase letters, numbers, and special characters.',
          ),
          const SizedBox(height: 8),
          _buildBulletPoint(
            'Consider using a password manager to generate and store strong passwords.',
          ),
        ],
      ),
    );
  }

  Widget _buildBulletPoint(String text) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('• ', style: TextStyle(fontWeight: FontWeight.bold)),
        Expanded(
          child: Text(text, style: const TextStyle(fontSize: 14)),
        ),
      ],
    );
  }
}
